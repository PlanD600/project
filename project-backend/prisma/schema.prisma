// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  avatarUrl String?
  role      String    @default("Employee")
  teamId    String?
  team      Team?     @relation(fields: [teamId], references: [id])
  projects  Project[] @relation("Owner")
  tasks     Task[]    // This defines the many-to-many relation
  comments  Comment[]
}

model Team {
  id      String   @id @default(cuid())
  name    String
  members User[]
  Project Project?
}

model Project {
  id           String    @id @default(cuid())
  name         String
  description  String?
  ownerId      String
  owner        User      @relation("Owner", fields: [ownerId], references: [id])
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  startDate    DateTime
  endDate      DateTime
  budget       Float
  status       String    @default("active")
  tasks        Task[]
  financials   FinancialTransaction[]
}

model Task {
  id                 String    @id @default(cuid())
  title              String
  description        String?
  projectId          String
  project            Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columnId           String
  // We remove assigneeIds and let Prisma handle the relation
  assignees          User[]    // This defines the many-to-many relation
  startDate          DateTime
  endDate            DateTime
  baselineStartDate  DateTime?
  baselineEndDate    DateTime?
  dependencies       String[]
  comments           Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  timestamp DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  taskId    String
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("Replies")
}

model FinancialTransaction {
  id          String   @id @default(cuid())
  type        String // 'Income' or 'Expense'
  date        DateTime
  source      String
  description String?
  amount      Float
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}