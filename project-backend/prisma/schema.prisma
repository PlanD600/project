// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Column {
  id        String @id @default(cuid())
  name      String
  order     Int    // To define the order of columns in the UI
}

model Organization {
  id      String   @id @default(cuid())
  name    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User[]
  teams      Team[]
  projects   Project[]
  tasks      Task[]
  financials FinancialTransaction[]
  comments   Comment[]
}


enum UserRole {
  ADMIN
  TEAM_MANAGER
  EMPLOYEE
  GUEST
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  avatarUrl String?
  role      UserRole      @default(EMPLOYEE)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  teamId    String?
  team     Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
  projects  Project[] @relation("Owner")
  tasks     Task[]    // This defines the many-to-many relation
  comments  Comment[]
}

model Team {
  id      String   @id @default(cuid())
  name    String

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  members User[]
  projects Project[]
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  budget      Float
  status      String    @default("active")
  deletedAt   DateTime?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  ownerId String
  owner   User   @relation("Owner", fields: [ownerId], references: [id])

  teamId  String?
  team    Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull) // If a team is deleted, the project is not deleted

  tasks      Task[]
  financials FinancialTransaction[]
}

model Task {
  id                String    @id @default(cuid())
  title             String
  description       String?
  columnId          String
  startDate         DateTime
  endDate           DateTime
  baselineStartDate DateTime?
  baselineEndDate   DateTime?
  dependencies      String[]
  plannedCost       Float     @default(0)
  actualCost        Float     @default(0)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignees User[]
  comments  Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  timestamp DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  taskId    String
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("Replies")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model FinancialTransaction {
  id          String   @id @default(cuid())
  type        String // 'Income' or 'Expense'
  date        DateTime
  source      String
  description String?
  amount      Float
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}