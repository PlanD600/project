// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Column {
  id      String @id @default(cuid())
  name    String
  order   Int    // To define the order of columns in the UI
}

model Organization {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Subscription fields
  planType           PlanType         @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  stripeCustomerId   String?
  stripeSubscriptionId String?

  // Multi-tenant relationships
  memberships Membership[]
  teams      Team[]
  projects   Project[]
  tasks      Task[]
  financials FinancialTransaction[]
  comments   Comment[]
}

enum PlanType {
  FREE
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
}

// Updated roles to support multi-tenant model
enum UserRole {
  SUPER_ADMIN    // Can create and manage multiple organizations
  ORG_ADMIN      // Organization admin (limited to one org)
  TEAM_LEADER    // Team leader within an organization
  EMPLOYEE       // Regular employee
  GUEST          // Guest user (project-specific access)
}

// New junction table for user-organization relationships
model Membership {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatarUrl String?
  
  // Multi-tenant relationships
  memberships Membership[]
  
  // Project relationships
  ledProjects Project[] @relation("ProjectTeamLeaders")
  tasks      Task[]    // This defines the many-to-many relation for task assignees
  comments   Comment[]

  // Team relationship (optional - for team-based users)
  teamId   String?
  team     Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  
  // Password reset fields
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Team {
  id      String   @id @default(cuid())
  name    String

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  members  User[]
  projects Project[]
}

model Project {
  id           String   @id @default(cuid())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime
  budget       Float
  status       String   @default("active")
  deletedAt    DateTime?
  
  // This is the new relation for the list of team leaders
  teamLeaders User[] @relation("ProjectTeamLeaders")

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull) // If a team is deleted, the project is not deleted

  tasks      Task[]
  financials FinancialTransaction[]
}

model Task {
  id                String   @id @default(cuid())
  title             String
  description       String?
  columnId          String
  startDate         DateTime
  endDate           DateTime
  baselineStartDate DateTime?
  baselineEndDate   DateTime?
  dependencies      String[]
  plannedCost       Float    @default(0)
  actualCost        Float    @default(0)
  color             String?  // New: color hex code for color-coding

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignees User[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment? @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("Replies")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model FinancialTransaction {
  id          String   @id @default(cuid())
  type        String // 'Income' or 'Expense'
  date        DateTime
  source      String
  description String?
  amount      Float
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
